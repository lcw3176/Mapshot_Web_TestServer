"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LatLng = /*#__PURE__*/function () {
  function LatLng(lat, lng) {
    _classCallCheck(this, LatLng);

    this.x;
    this.y;

    if (lat != undefined && lng != undefined) {
      this.init(lat, lng);
    }
  }

  _createClass(LatLng, [{
    key: "init",
    value: function init(lat, lng) {
      if (lat > lng) {
        this.x = lat;
        this.y = lng;
      } else {
        this.x = lng;
        this.y = lat;
      }
    }
  }, {
    key: "getX",
    value: function getX() {
      return this.x;
    }
  }, {
    key: "getY",
    value: function getY() {
      return this.y;
    }
  }]);

  return LatLng;
}();

var Tile = /*#__PURE__*/function () {
  function Tile() {
    _classCallCheck(this, Tile);

    this.width;
    this.noLogoHeight; // 로고 없을 때

    this.withLogoHeight; // 로고 있을 때

    this.noLogoValue;
    this.withLogoValue;
    this.correctFix;
  }

  _createClass(Tile, [{
    key: "generate",
    value: function generate(latlng) {
      var controlPoint = 37.5668;
      this.noLogoHeight = this.noLogoValue + (controlPoint - latlng.getY()) * this.correctFix;
      this.withLogoHeight = this.withLogoValue + (controlPoint - latlng.getY()) * this.correctFix;
    }
  }, {
    key: "setLevel",
    value: function setLevel(config) {
      if (config.zoom == mapshot.radius.One.zoom || config.zoom == mapshot.radius.Two.zoom) {
        this.correctFix = 0.00002833;
        this.width = 0.00268;
        this.noLogoValue = 0.002070;
        this.withLogoValue = 0.00204;
      } else if (config.zoom == mapshot.radius.Five.zoom || config.zoom == mapshot.radius.Ten.zoom) {
        this.correctFix = 0.00011633;
        this.width = 0.01072;
        this.noLogoValue = 0.00829;
        this.withLogoValue = 0.00817;
      } else {
        throw "Parameter is not mapshot.radius Type";
      }
    }
  }, {
    key: "getWidthBetweenBlock",
    value: function getWidthBetweenBlock() {
      return this.width;
    }
  }, {
    key: "getHeightBetweenBlockNoLogo",
    value: function getHeightBetweenBlockNoLogo() {
      return this.noLogoHeight;
    }
  }, {
    key: "getHeightBetweenBlockWithLogo",
    value: function getHeightBetweenBlockWithLogo() {
      return this.withLogoHeight;
    }
  }, {
    key: "getSE",
    value: function getSE(config, latlng) {
      this.setLevel(config);
      this.generate(latlng);
      var Lat = latlng.getY() - this.noLogoHeight * parseInt(config.sideBlockCount / 2) - this.noLogoHeight / 2;
      var Lng = latlng.getX() + this.width * parseInt(config.sideBlockCount / 2) + this.width / 2;
      return new mapshot.coors.LatLng(Lat, Lng);
    }
  }, {
    key: "getSW",
    value: function getSW(config, latlng) {
      this.setLevel(config);
      this.generate(latlng);
      var Lat = latlng.getY() - this.noLogoHeight * parseInt(config.sideBlockCount / 2) - this.noLogoHeight / 2;
      var Lng = latlng.getX() - this.width * parseInt(config.sideBlockCount / 2) - this.width / 2;
      return new mapshot.coors.LatLng(Lat, Lng);
    }
  }, {
    key: "getNE",
    value: function getNE(config, latlng) {
      this.setLevel(config);
      this.generate(latlng);
      var Lat = latlng.getY() + this.noLogoHeight * parseInt(config.sideBlockCount / 2) + this.noLogoHeight / 2;
      var Lng = latlng.getX() + this.width * parseInt(config.sideBlockCount / 2) + this.width / 2;
      return new mapshot.coors.LatLng(Lat, Lng);
    }
  }, {
    key: "getNW",
    value: function getNW(config, latlng) {
      this.setLevel(config);
      this.generate(latlng);
      var Lat = latlng.getY() + this.noLogoHeight * parseInt(config.sideBlockCount / 2) + this.noLogoHeight / 2;
      var Lng = latlng.getX() - this.width * parseInt(config.sideBlockCount / 2) - this.width / 2;
      return new mapshot.coors.LatLng(Lat, Lng);
    }
  }, {
    key: "draw",
    value: function draw(centerLatLng, config, naverProfile, callback) {
      this.setLevel(config);
      var defaultBlockHeight = 1000;
      var logoRemover = 27;
      var sideBlockCount = config.sideBlockCount;
      var canvas = document.createElement("canvas");
      var canvasBlockSize = sideBlockCount <= 11 ? 1000 : 500;
      canvas.width = sideBlockCount * canvasBlockSize;
      canvas.height = sideBlockCount * (defaultBlockHeight - logoRemover);
      var ctx = canvas.getContext("2d");
      var temp = this.getNW(config, centerLatLng);
      var startLatLng = new mapshot.coors.LatLng(temp.getX() + this.getWidthBetweenBlock() / 2, temp.getY() - this.getHeightBetweenBlockNoLogo() / 2);
      var returnXValue = startLatLng.getX();
      var order = 0;
      var isCorner = false;
      var total = sideBlockCount * sideBlockCount;
      var complete = 0;
      naverProfile.setHeight(1000);
      var tileImageLoadStartEvent = new CustomEvent("tileImageLoadStart", {
        detail: {
          total: total
        }
      });
      var tileImageOnLoadEvent = new CustomEvent("tileImageOnLoad");
      var tileImageOnErrorEvent = new CustomEvent("tileImageOnError");
      document.body.dispatchEvent(tileImageLoadStartEvent);

      for (var i = 0; i < sideBlockCount; i++) {
        for (var j = 0; j < sideBlockCount; j++) {
          if (i + 1 === sideBlockCount && j === 0) {
            naverProfile.setHeight(1000 - logoRemover);
            startLatLng.init(startLatLng.getX(), startLatLng.getY() + this.getHeightBetweenBlockNoLogo());
            startLatLng.init(startLatLng.getX(), startLatLng.getY() - this.getHeightBetweenBlockWithLogo());
            isCorner = true;
          }

          naverProfile.setCenter(startLatLng);
          var image = new Image();
          image.crossOrigin = "*";
          image.src = naverProfile.getUrl();

          (function (_order, _image) {
            var xPos = _order % sideBlockCount * canvasBlockSize;
            var yPos = parseInt(_order / sideBlockCount) * canvasBlockSize;

            _image.onload = function () {
              ctx.drawImage(_image, 0, 0, _image.width, defaultBlockHeight - logoRemover, xPos, yPos, canvasBlockSize, canvasBlockSize);
              complete++;
              document.body.dispatchEvent(tileImageOnLoadEvent);

              if (complete == total) {
                callback(canvas);
              }
            };

            _image.onerror = function () {
              complete++;
              document.body.dispatchEvent(tileImageOnErrorEvent);

              if (complete == total) {
                callback(canvas);
              }
            };
          })(order, image);

          order++;
          startLatLng.init(startLatLng.getX() + this.getWidthBetweenBlock(), startLatLng.getY());

          if (isCorner) {
            naverProfile.setHeight(1000);
            startLatLng.init(startLatLng.getX(), startLatLng.getY() + this.getHeightBetweenBlockWithLogo());
            startLatLng.init(startLatLng.getX(), startLatLng.getY() - this.getHeightBetweenBlockNoLogo());
            isCorner = false;
          }
        }

        startLatLng.init(returnXValue, startLatLng.getY() - this.getHeightBetweenBlockNoLogo());
      }
    }
  }]);

  return Tile;
}();

var Naver = /*#__PURE__*/function () {
  function Naver() {
    _classCallCheck(this, Naver);

    this.mapType;
    this.center;
    this.level;
    this.key;
    this.height;
  }

  _createClass(Naver, [{
    key: "setMapType",
    value: function setMapType(param) {
      this.mapType = param;
    }
  }, {
    key: "setCenter",
    value: function setCenter(param) {
      this.center = param;
    }
  }, {
    key: "setLevel",
    value: function setLevel(config) {
      this.level = config.zoom;
    }
  }, {
    key: "setKey",
    value: function setKey(param) {
      this.key = param;
    }
  }, {
    key: "setHeight",
    value: function setHeight(param) {
      this.height = param;
    }
  }, {
    key: "getUrl",
    value: function getUrl() {
      return "https://naveropenapi.apigw.ntruss.com/map-static/v2/raster-cors?" + "w=1000" + "&h=" + this.height + "&center=" + this.center.getX() + "," + this.center.getY() + "&level=" + this.level + "&X-NCP-APIGW-API-KEY-ID=" + this.key + "&maptype=" + this.mapType;
    }
  }]);

  return Naver;
}();

var mapshot = {
  maps: {
    Tile: Tile
  },
  coors: {
    LatLng: LatLng
  },
  profile: {
    Naver: Naver
  },
  radius: {
    One: {
      sideBlockCount: 11,
      zoom: 18
    },
    Two: {
      sideBlockCount: 17,
      zoom: 18
    },
    Five: {
      sideBlockCount: 11,
      zoom: 16
    },
    Ten: {
      sideBlockCount: 21,
      zoom: 16
    }
  }
};