class LatLng{
    constructor(lat, lng){
        this.x;
        this.y;

        if(lat != undefined && lng != undefined){
            this.init(lat, lng)
        }
    }

    init(lat, lng){

        if(lat > lng){
            this.x = lat
            this.y = lng
        } else{
            this.x = lng
            this.y = lat;            
        }
    }


    getX(){
        return this.x;
    }

    getY(){
        return this.y;
    }
}

class Tile{
    constructor(){
        this.width;
        this.noLogoHeight; // 로고 없을 때
        this.withLogoHeight; // 로고 있을 때

        this.noLogoValue;
        this.withLogoValue;
        this.correctFix;

        this.tileImageOnLoadEvent = new CustomEvent("tileImageOnLoad");
        this.tileImageOnErrorEvent = new CustomEvent("tileImageOnError");


        this.returnXValue;
        this.order;
        this.isCorner;
        this.total;
        this.complete;
        this.xPos;
        this.yPox;
        this.sideBlockCount;
        this.se;
        this.nw;
        this.startLatLng;  
        this.vworldProfile;
        this.callback;
        
    }

    generate(latlng){
        const controlPoint = 37.5668;

        this.noLogoHeight = this.noLogoValue + (controlPoint - latlng.getY()) * this.correctFix;
        this.withLogoHeight = this.withLogoValue + (controlPoint - latlng.getY()) * this.correctFix;
        
    }

    setLevel(config){

        if(config.zoom == mapshot.radius.One.zoom || config.zoom == mapshot.radius.Two.zoom){
            this.correctFix = 0.00002833;
            this.width = 0.00268;
            this.noLogoValue = 0.002070; 
            this.withLogoValue = 0.00204;

        } else if(config.zoom == mapshot.radius.Five.zoom || config.zoom == mapshot.radius.Ten.zoom){
            this.correctFix = 0.00011633;
            this.width = 0.01072;
            this.noLogoValue = 0.00829;
            this.withLogoValue = 0.00817;
        } else{
            throw "Parameter is not mapshot.radius Type";
        }   
    }

    getWidthBetweenBlock(){
        return this.width;
    }

    getHeightBetweenBlockNoLogo(){
        return this.noLogoHeight;
    }

    getHeightBetweenBlockWithLogo(){
        return this.withLogoHeight;
    }


    getSE(config, latlng){
        this.setLevel(config);
        this.generate(latlng);

        var Lat = latlng.getY() - this.noLogoHeight * parseInt(config.sideBlockCount / 2) - this.noLogoHeight / 2;
        var Lng = latlng.getX() + this.width * parseInt(config.sideBlockCount / 2) + this.width / 2;

        return new mapshot.coors.LatLng(Lat, Lng);
    }


    getSW(config, latlng){
        this.setLevel(config);
        this.generate(latlng);

        var Lat = latlng.getY() - this.noLogoHeight * parseInt(config.sideBlockCount / 2) - this.noLogoHeight / 2;
        var Lng = latlng.getX() - this.width * parseInt(config.sideBlockCount / 2) - this.width / 2;

        return new mapshot.coors.LatLng(Lat, Lng);
    }


    getNE(config, latlng){
        this.setLevel(config);
        this.generate(latlng);

        var Lat = latlng.getY() + this.noLogoHeight * parseInt(config.sideBlockCount / 2) + this.noLogoHeight / 2;
        var Lng = latlng.getX() + this.width * parseInt(config.sideBlockCount / 2) + this.width / 2;

        return new mapshot.coors.LatLng(Lat, Lng);
    }


    getNW(config, latlng){
        this.setLevel(config);
        this.generate(latlng);

        var Lat = latlng.getY() + this.noLogoHeight * parseInt(config.sideBlockCount / 2) + this.noLogoHeight / 2;
        var Lng = latlng.getX() - this.width * parseInt(config.sideBlockCount / 2) - this.width / 2;

        return new mapshot.coors.LatLng(Lat, Lng);
    }

    drawNaver(centerLatLng, config, naverProfile, callback){
        this.setLevel(config);
        const defaultBlockHeight = 1000;
        const logoRemover = 27;

        var sideBlockCount = config.sideBlockCount;
        var canvas = document.createElement("canvas");
        var canvasBlockSize = (sideBlockCount <= 11) ? 1000 : 500;

        canvas.width = sideBlockCount * canvasBlockSize;
        canvas.height = sideBlockCount * (defaultBlockHeight - logoRemover);

        var ctx = canvas.getContext("2d");
        var temp = this.getNW(config, centerLatLng);
        var startLatLng = new mapshot.coors.LatLng(
            temp.getX() + this.getWidthBetweenBlock() / 2,
            temp.getY() - this.getHeightBetweenBlockNoLogo() / 2
        );

        var returnXValue = startLatLng.getX();
        var order = 0;
        var isCorner = false;
        var total = sideBlockCount * sideBlockCount;
        var complete = 0;
        naverProfile.setHeight(1000);
        
        var tileImageLoadStartEvent = new CustomEvent("tileImageLoadStart",{
            detail:{
                total:total
            }
            
        });

        var tileImageOnLoadEvent = new CustomEvent("tileImageOnLoad");
        var tileImageOnErrorEvent = new CustomEvent("tileImageOnError");

        document.body.dispatchEvent(tileImageLoadStartEvent);
        for (var i = 0; i < sideBlockCount; i++) {
            for (var j = 0; j < sideBlockCount; j++) {

                if (i + 1 === sideBlockCount && j === 0) {
                    naverProfile.setHeight(1000 - logoRemover);
                    startLatLng.init(startLatLng.getX(), startLatLng.getY() + this.getHeightBetweenBlockNoLogo());
                    startLatLng.init(startLatLng.getX(), startLatLng.getY() - this.getHeightBetweenBlockWithLogo());
                    isCorner = true;
                }

                naverProfile.setCenter(startLatLng);

                var image = new Image();
                image.crossOrigin = "*";
                image.src = naverProfile.getUrl();

                (function (_order, _image) {
                    var xPos = (_order % sideBlockCount) * canvasBlockSize;
                    var yPos = parseInt(_order / sideBlockCount) * canvasBlockSize;

                    _image.onload = function () {
                        ctx.drawImage(_image, 0, 0, _image.width, defaultBlockHeight - logoRemover, xPos, yPos, canvasBlockSize, canvasBlockSize);
                        complete++;
                        document.body.dispatchEvent(tileImageOnLoadEvent);

                        if (complete == total) {
                            callback(canvas);
                        }
                    }

                    _image.onerror = function () {
                        complete++;
                        document.body.dispatchEvent(tileImageOnErrorEvent);

                        if (complete == total) {
                            callback(canvas);
                        }
                    }

                })(order, image)

                order++;
                startLatLng.init(startLatLng.getX() + this.getWidthBetweenBlock(), startLatLng.getY());

                if (isCorner) {
                    naverProfile.setHeight(1000);
                    startLatLng.init(startLatLng.getX(), startLatLng.getY() + this.getHeightBetweenBlockWithLogo());
                    startLatLng.init(startLatLng.getX(), startLatLng.getY() - this.getHeightBetweenBlockNoLogo());
                    isCorner = false;
                }
            }

            startLatLng.init(returnXValue, startLatLng.getY() - this.getHeightBetweenBlockNoLogo());
        }
    }

    drawVworld(centerLatLng, config, vworldProfile, callback){
        this.setLevel(config);
        const defaultBlockHeight = 1000;
        const defaultBlockWidth = 1000;
        const logoRemover = 27;

        this.sideBlockCount = config.sideBlockCount;
        var canvas = document.getElementById("canvas");
        var canvasBlockSize = (this.sideBlockCount <= 11) ? 1000 : 500;

        canvas.width = this.sideBlockCount * canvasBlockSize;
        canvas.height = this.sideBlockCount * (defaultBlockHeight - logoRemover);

        this.nw = this.getNW(config, centerLatLng);
        this.startLatLng = new mapshot.coors.LatLng(
            nw.getX() + this.getWidthBetweenBlock() / 2,
            nw.getY() - this.getHeightBetweenBlockNoLogo() / 2
        );

        this.returnXValue = this.startLatLng.getX();
        this.order = 0;
        this.isCorner = false;
        this.total = this.sideBlockCount * this.sideBlockCount;
        this.complete = 0;
        
        this.se = new mapshot.coors.LatLng(
            this.nw.getX() + this.getWidthBetweenBlock(),
            this.nw.getY() - this.getHeightBetweenBlockWithLogo()  
        );
        this.vworldProfile = vworldProfile;

        this.vworldProfile.setBbox(this.nw.getX() + "," + this.se.getY() + "," + this.se.getX() + "," + this.nw.getY());
        
        var tileImageLoadStartEvent = new CustomEvent("tileImageLoadStart",{
            detail:{
                total:this.total
            }
            
        });

        this.callback = callback;
        document.body.dispatchEvent(tileImageLoadStartEvent);

        $.ajax({
            url: this.vworldProfile.getUrl(),
            dataType : "jsonp",
            async:false,
        })
    }    


    parseResponse(data){
            this.xPos = (this.order % this.sideBlockCount) * this.canvasBlockSize;
            this.yPos = parseInt(this.order / this.sideBlockCount) * this.canvasBlockSize;

            this.order++;

            if(data.totalFeatures == 0){
                document.body.dispatchEvent(this.tileImageOnLoadEvent);
                return;
            }
            
            var minx = this.nw.getX();
            var miny = this.se.getY();
            var maxx = this.se.getX();
            var maxy = this.nw.getY();

            var can = document.createElement("canvas");
            can.width = 1000;
            can.height = 1000;
            var ctx = can.getContext('2d');

            ctx.translate(can.width, 0);
            ctx.scale(-1, 1);
            
            ctx.strokeStyle = "red";

            var xrate = maxx - minx;
            var yrate = maxy - miny;

            var xtimes = 1000 / xrate;
            var ytimes = 1000 / yrate


            for(var i = 0; i < data.features.length; i++){
                ctx.beginPath();

                for(var j = 0; ;){
                    var x = data.features[i].geometry.coordinates[0][0][j][0];
                    var y = data.features[i].geometry.coordinates[0][0][j][1];

                    ctx.moveTo(
                        (maxx - x) * xtimes, 
                        (maxy - y) * ytimes
                    );

                    break;
                }

                for(var j = 1; j < data.features[i].geometry.coordinates[0][0].length; j++){
                    var x = data.features[i].geometry.coordinates[0][0][j][0];
                    var y = data.features[i].geometry.coordinates[0][0][j][1];
                    
                    if(x > maxx || y > maxy){
                        continue;
                    }
                    ctx.lineTo(
                        (maxx - x) * xtimes, 
                        (maxy - y) * ytimes
                    );
                }

                ctx.stroke();
                ctx.closePath();

            } 
            document.body.dispatchEvent(this.tileImageOnLoadEvent);

            can.toBlob(function(blob){
                var img = new Image();
                img.src = URL.createObjectURL(blob);

                img.onload = function(){
                    console.log(this.xPos, this.yPos);
                    document.getElementById("canvas").getContext('2d').drawImage(img, 0, 0, 1000, 1000, this.xPos, this.yPos, 1000, 1000);

                    if(this.order >= this.total){
                        this.callback(document.getElementById("canvas"));
                    } else{
        
                        if(this.order % this.sideBlockCount == 0){
                            this.startLatLng.init(this.returnXValue, this.startLatLng.getY() - this.getHeightBetweenBlockNoLogo());
        
                            this.se.init(
                                this.startLatLng.getX() + this.getWidthBetweenBlock() / 2,
                                this.startLatLng.getY() - this.getHeightBetweenBlockNoLogo() / 2
                            );
        
                            this.nw.init(
                                this.startLatLng.getX() - this.getWidthBetweenBlock() / 2,
                                this.startLatLng.getY() + this.getHeightBetweenBlockNoLogo() / 2
                            );
                        }
                        this.startLatLng.init(this.startLatLng.getX() + this.getWidthBetweenBlock(), this.startLatLng.getY());
        
                        this.se.init(
                            this.startLatLng.getX() + this.getWidthBetweenBlock() / 2,
                            this.startLatLng.getY() - this.getHeightBetweenBlockNoLogo() / 2
                        );
        
                        this.nw.init(
                            this.startLatLng.getX() - this.getWidthBetweenBlock() / 2,
                            this.startLatLng.getY() + this.getHeightBetweenBlockNoLogo() / 2
                        );
                        
                        this.vworldProfile.setBbox(this.nw.getX() + "," + this.se.getY() + "," + this.se.getX() + "," + this.nw.getY());
        
                        $.ajax({
                            url : this.vworldProfile.getUrl(),
                            dataType : "jsonp",
                            async:false,
                        })
                    }
                }
            }, "image/jpeg");

           
        }
}

class Vworld{
    constructor(){
        this.bbox;
    }

    setBbox(param){
        this.bbox = param;
    }

    getUrl(){
        return "https://api.vworld.kr/req/wfs?SERVICE=WFS&REQUEST=GetFeature&TYPENAME=lt_c_upisuq151"
            + "&MAXFEATURES=100&SRSNAME=EPSG:4326&OUTPUT=text/javascript&KEY=BA51886D-3289-32E9-AC7C-1D7A36D3BB20&DOMAIN=https://testservermapshot.netlify.app"
            + "&BBOX=" + this.bbox;
             
    }

}


class Naver{
    constructor(){
        this.mapType;
        this.center;
        this.level;
        this.key;
        this.height;
    }

    setMapType(param){
        this.mapType = param;
    }

    setCenter(param){
        this.center = param;
    }

    setLevel(config){
        this.level = config.zoom;
    }

    setKey(param){
        this.key = param;
    }

    setHeight(param){
        this.height = param;
    }

    getUrl(){
        return "https://naveropenapi.apigw.ntruss.com/map-static/v2/raster-cors?"
             + "w=1000"
             + "&h=" + this.height
             + "&center=" +  this.center.getX() + "," + this.center.getY()
             + "&level=" + this.level
             + "&X-NCP-APIGW-API-KEY-ID=" + this.key
             + "&maptype=" + this.mapType;
    }

}



var mapshot = {
    maps:{
        Tile:Tile,
    },

    coors:{
        LatLng:LatLng, 
    },

    profile:{
        Naver:Naver,
        Vworld:Vworld
    },

    radius:{
        One:{
            sideBlockCount:11,
            zoom:18,
        },
        Two:{
            sideBlockCount:17,
            zoom:18,
        },
        Five:{
            sideBlockCount:11,
            zoom:16,
        },
        Ten:{
            sideBlockCount:21,
            zoom:16,
        },
    }
};